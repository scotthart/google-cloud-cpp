// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/bigquery/models/v2/models.proto

#include "google/cloud/bigquery/models/v2/internal/models_tracing_connection.h"
#include "google/cloud/internal/opentelemetry.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace bigquery_models_v2_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

ModelsTracingConnection::ModelsTracingConnection(
    std::shared_ptr<bigquery_models_v2::ModelsConnection> child)
    : child_(std::move(child)) {}

Status ModelsTracingConnection::DeleteModel(
    google::cloud::cpp::bigquery::models::v2::DeleteModelRequest const&
        request) {
  auto span =
      internal::MakeSpan("bigquery_models_v2::ModelsConnection::DeleteModel");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->DeleteModel(request));
}

StatusOr<google::cloud::cpp::bigquery::v2::Model>
ModelsTracingConnection::GetModel(
    google::cloud::cpp::bigquery::models::v2::GetModelRequest const& request) {
  auto span =
      internal::MakeSpan("bigquery_models_v2::ModelsConnection::GetModel");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetModel(request));
}

StatusOr<google::cloud::cpp::bigquery::v2::ListModelsResponse>
ModelsTracingConnection::ListModels(
    google::cloud::cpp::bigquery::models::v2::ListModelsRequest const&
        request) {
  auto span =
      internal::MakeSpan("bigquery_models_v2::ModelsConnection::ListModels");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->ListModels(request));
}

StatusOr<google::cloud::cpp::bigquery::v2::Model>
ModelsTracingConnection::PatchModel(
    google::cloud::cpp::bigquery::models::v2::PatchModelRequest const&
        request) {
  auto span =
      internal::MakeSpan("bigquery_models_v2::ModelsConnection::PatchModel");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->PatchModel(request));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<bigquery_models_v2::ModelsConnection>
MakeModelsTracingConnection(
    std::shared_ptr<bigquery_models_v2::ModelsConnection> conn) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  if (internal::TracingEnabled(conn->options())) {
    conn = std::make_shared<ModelsTracingConnection>(std::move(conn));
  }
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return conn;
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace bigquery_models_v2_internal
}  // namespace cloud
}  // namespace google
