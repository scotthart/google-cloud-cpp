// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/bigquery/tables/v2/tables.proto

#include "google/cloud/bigquery/tables/v2/tables_client.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace bigquery_tables_v2 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

TablesClient::TablesClient(std::shared_ptr<TablesConnection> connection,
                           Options opts)
    : connection_(std::move(connection)),
      options_(
          internal::MergeOptions(std::move(opts), connection_->options())) {}
TablesClient::~TablesClient() = default;

Status TablesClient::DeleteTable(std::string const& project_id,
                                 std::string const& dataset_id,
                                 std::string const& table_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::bigquery::tables::v2::DeleteTableRequest request;
  request.set_project_id(project_id);
  request.set_dataset_id(dataset_id);
  request.set_table_id(table_id);
  return connection_->DeleteTable(request);
}

Status TablesClient::DeleteTable(
    google::cloud::cpp::bigquery::tables::v2::DeleteTableRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteTable(request);
}

StatusOr<google::cloud::cpp::bigquery::v2::Table> TablesClient::GetTable(
    std::string const& project_id, std::string const& dataset_id,
    std::string const& table_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::bigquery::tables::v2::GetTableRequest request;
  request.set_project_id(project_id);
  request.set_dataset_id(dataset_id);
  request.set_table_id(table_id);
  return connection_->GetTable(request);
}

StatusOr<google::cloud::cpp::bigquery::v2::Table> TablesClient::GetTable(
    google::cloud::cpp::bigquery::tables::v2::GetTableRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetTable(request);
}

StatusOr<google::cloud::cpp::bigquery::v2::Policy> TablesClient::GetIamPolicy(
    std::string const& resource,
    google::cloud::cpp::bigquery::v2::GetIamPolicyRequest const&
        get_iam_policy_request_resource,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::bigquery::tables::v2::GetIamPolicyRequest request;
  request.set_resource(resource);
  *request.mutable_get_iam_policy_request_resource() =
      get_iam_policy_request_resource;
  return connection_->GetIamPolicy(request);
}

StatusOr<google::cloud::cpp::bigquery::v2::Policy> TablesClient::GetIamPolicy(
    google::cloud::cpp::bigquery::tables::v2::GetIamPolicyRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetIamPolicy(request);
}

StatusOr<google::cloud::cpp::bigquery::v2::Table> TablesClient::InsertTable(
    std::string const& project_id, std::string const& dataset_id,
    google::cloud::cpp::bigquery::v2::Table const& table_resource,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::bigquery::tables::v2::InsertTableRequest request;
  request.set_project_id(project_id);
  request.set_dataset_id(dataset_id);
  *request.mutable_table_resource() = table_resource;
  return connection_->InsertTable(request);
}

StatusOr<google::cloud::cpp::bigquery::v2::Table> TablesClient::InsertTable(
    google::cloud::cpp::bigquery::tables::v2::InsertTableRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->InsertTable(request);
}

StatusOr<google::cloud::cpp::bigquery::v2::TableList> TablesClient::ListTables(
    std::string const& project_id, std::string const& dataset_id,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::bigquery::tables::v2::ListTablesRequest request;
  request.set_project_id(project_id);
  request.set_dataset_id(dataset_id);
  return connection_->ListTables(request);
}

StatusOr<google::cloud::cpp::bigquery::v2::TableList> TablesClient::ListTables(
    google::cloud::cpp::bigquery::tables::v2::ListTablesRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListTables(request);
}

StatusOr<google::cloud::cpp::bigquery::v2::Table> TablesClient::PatchTable(
    std::string const& project_id, std::string const& dataset_id,
    std::string const& table_id,
    google::cloud::cpp::bigquery::v2::Table const& table_resource,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::bigquery::tables::v2::PatchTableRequest request;
  request.set_project_id(project_id);
  request.set_dataset_id(dataset_id);
  request.set_table_id(table_id);
  *request.mutable_table_resource() = table_resource;
  return connection_->PatchTable(request);
}

StatusOr<google::cloud::cpp::bigquery::v2::Table> TablesClient::PatchTable(
    google::cloud::cpp::bigquery::tables::v2::PatchTableRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->PatchTable(request);
}

StatusOr<google::cloud::cpp::bigquery::v2::Policy> TablesClient::SetIamPolicy(
    std::string const& resource,
    google::cloud::cpp::bigquery::v2::SetIamPolicyRequest const&
        set_iam_policy_request_resource,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::bigquery::tables::v2::SetIamPolicyRequest request;
  request.set_resource(resource);
  *request.mutable_set_iam_policy_request_resource() =
      set_iam_policy_request_resource;
  return connection_->SetIamPolicy(request);
}

StatusOr<google::cloud::cpp::bigquery::v2::Policy> TablesClient::SetIamPolicy(
    google::cloud::cpp::bigquery::tables::v2::SetIamPolicyRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->SetIamPolicy(request);
}

StatusOr<google::cloud::cpp::bigquery::v2::TestIamPermissionsResponse>
TablesClient::TestIamPermissions(
    std::string const& resource,
    google::cloud::cpp::bigquery::v2::TestIamPermissionsRequest const&
        test_iam_permissions_request_resource,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::bigquery::tables::v2::TestIamPermissionsRequest request;
  request.set_resource(resource);
  *request.mutable_test_iam_permissions_request_resource() =
      test_iam_permissions_request_resource;
  return connection_->TestIamPermissions(request);
}

StatusOr<google::cloud::cpp::bigquery::v2::TestIamPermissionsResponse>
TablesClient::TestIamPermissions(
    google::cloud::cpp::bigquery::tables::v2::TestIamPermissionsRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->TestIamPermissions(request);
}

StatusOr<google::cloud::cpp::bigquery::v2::Table> TablesClient::UpdateTable(
    std::string const& project_id, std::string const& dataset_id,
    std::string const& table_id,
    google::cloud::cpp::bigquery::v2::Table const& table_resource,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::bigquery::tables::v2::UpdateTableRequest request;
  request.set_project_id(project_id);
  request.set_dataset_id(dataset_id);
  request.set_table_id(table_id);
  *request.mutable_table_resource() = table_resource;
  return connection_->UpdateTable(request);
}

StatusOr<google::cloud::cpp::bigquery::v2::Table> TablesClient::UpdateTable(
    google::cloud::cpp::bigquery::tables::v2::UpdateTableRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateTable(request);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace bigquery_tables_v2
}  // namespace cloud
}  // namespace google
