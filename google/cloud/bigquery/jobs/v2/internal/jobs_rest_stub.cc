// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/bigquery/jobs/v2/jobs.proto

#include "google/cloud/bigquery/jobs/v2/internal/jobs_rest_stub.h"
#include "google/cloud/common_options.h"
#include "google/cloud/internal/absl_str_cat_quiet.h"
#include "google/cloud/internal/rest_stub_helpers.h"
#include "google/cloud/status_or.h"
#include <google/cloud/bigquery/jobs/v2/jobs.pb.h>
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace bigquery_jobs_v2_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

DefaultJobsRestStub::DefaultJobsRestStub(Options options)
    : service_(rest_internal::MakePooledRestClient(
          options.get<EndpointOption>(), options)),
      options_(std::move(options)) {}

DefaultJobsRestStub::DefaultJobsRestStub(
    std::shared_ptr<rest_internal::RestClient> service, Options options)
    : service_(std::move(service)), options_(std::move(options)) {}

StatusOr<google::cloud::cpp::bigquery::v2::JobCancelResponse>
DefaultJobsRestStub::Cancel(
    google::cloud::rest_internal::RestContext& rest_context,
    Options const& options,
    google::cloud::cpp::bigquery::jobs::v2::CancelRequest const& request) {
  return rest_internal::Post<
      google::cloud::cpp::bigquery::v2::JobCancelResponse>(
      *service_, rest_context, request, false,
      absl::StrCat("/", "bigquery", "/",
                   rest_internal::DetermineApiVersion("v2", options), "/",
                   "projects", "/", request.project_id(), "/", "jobs", "/",
                   request.job_id(), "/", "cancel"),
      rest_internal::TrimEmptyQueryParameters(
          {std::make_pair("location", request.location())}));
}

Status DefaultJobsRestStub::DeleteJob(
    google::cloud::rest_internal::RestContext& rest_context,
    Options const& options,
    google::cloud::cpp::bigquery::jobs::v2::DeleteJobRequest const& request) {
  return rest_internal::Delete(
      *service_, rest_context, request, false,
      absl::StrCat("/", "bigquery", "/",
                   rest_internal::DetermineApiVersion("v2", options), "/",
                   "projects", "/", request.project_id(), "/", "jobs", "/",
                   request.job_id(), "/", "delete"),
      rest_internal::TrimEmptyQueryParameters(
          {std::make_pair("location", request.location())}));
}

StatusOr<google::cloud::cpp::bigquery::v2::Job> DefaultJobsRestStub::GetJob(
    google::cloud::rest_internal::RestContext& rest_context,
    Options const& options,
    google::cloud::cpp::bigquery::jobs::v2::GetJobRequest const& request) {
  return rest_internal::Get<google::cloud::cpp::bigquery::v2::Job>(
      *service_, rest_context, request, false,
      absl::StrCat("/", "bigquery", "/",
                   rest_internal::DetermineApiVersion("v2", options), "/",
                   "projects", "/", request.project_id(), "/", "jobs", "/",
                   request.job_id()),
      rest_internal::TrimEmptyQueryParameters(
          {std::make_pair("location", request.location())}));
}

StatusOr<google::cloud::cpp::bigquery::v2::GetQueryResultsResponse>
DefaultJobsRestStub::GetQueryResults(
    google::cloud::rest_internal::RestContext& rest_context,
    Options const& options,
    google::cloud::cpp::bigquery::jobs::v2::GetQueryResultsRequest const&
        request) {
  return rest_internal::Get<
      google::cloud::cpp::bigquery::v2::GetQueryResultsResponse>(
      *service_, rest_context, request, false,
      absl::StrCat("/", "bigquery", "/",
                   rest_internal::DetermineApiVersion("v2", options), "/",
                   "projects", "/", request.project_id(), "/", "queries", "/",
                   request.job_id()),
      rest_internal::TrimEmptyQueryParameters(
          {std::make_pair(
               "format_options_use_int64_timestamp",
               request.format_options_use_int64_timestamp() ? "1" : "0"),
           std::make_pair("location", request.location()),
           std::make_pair("max_results", std::to_string(request.max_results())),
           std::make_pair("page_token", request.page_token()),
           std::make_pair("start_index", request.start_index()),
           std::make_pair("timeout_ms",
                          std::to_string(request.timeout_ms()))}));
}

StatusOr<google::cloud::cpp::bigquery::v2::Job> DefaultJobsRestStub::InsertJob(
    google::cloud::rest_internal::RestContext& rest_context,
    Options const& options,
    google::cloud::cpp::bigquery::jobs::v2::InsertJobRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::bigquery::v2::Job>(
      *service_, rest_context, request.job_resource(), false,
      absl::StrCat("/", "bigquery", "/",
                   rest_internal::DetermineApiVersion("v2", options), "/",
                   "projects", "/", request.project_id(), "/", "jobs"));
}

StatusOr<google::cloud::cpp::bigquery::v2::JobList>
DefaultJobsRestStub::ListJobs(
    google::cloud::rest_internal::RestContext& rest_context,
    Options const& options,
    google::cloud::cpp::bigquery::jobs::v2::ListJobsRequest const& request) {
  return rest_internal::Get<google::cloud::cpp::bigquery::v2::JobList>(
      *service_, rest_context, request, false,
      absl::StrCat("/", "bigquery", "/",
                   rest_internal::DetermineApiVersion("v2", options), "/",
                   "projects", "/", request.project_id(), "/", "jobs"),
      rest_internal::TrimEmptyQueryParameters(
          {std::make_pair("all_users", request.all_users() ? "1" : "0"),
           std::make_pair("max_creation_time", request.max_creation_time()),
           std::make_pair("max_results", std::to_string(request.max_results())),
           std::make_pair("min_creation_time", request.min_creation_time()),
           std::make_pair("page_token", request.page_token()),
           std::make_pair("parent_job_id", request.parent_job_id()),
           std::make_pair("projection", request.projection()),
           std::make_pair("state_filter", request.state_filter())}));
}

StatusOr<google::cloud::cpp::bigquery::v2::QueryResponse>
DefaultJobsRestStub::Query(
    google::cloud::rest_internal::RestContext& rest_context,
    Options const& options,
    google::cloud::cpp::bigquery::jobs::v2::QueryRequest const& request) {
  return rest_internal::Post<google::cloud::cpp::bigquery::v2::QueryResponse>(
      *service_, rest_context, request.query_request_resource(), false,
      absl::StrCat("/", "bigquery", "/",
                   rest_internal::DetermineApiVersion("v2", options), "/",
                   "projects", "/", request.project_id(), "/", "queries"));
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace bigquery_jobs_v2_internal
}  // namespace cloud
}  // namespace google
