// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/bigquery/jobs/v2/jobs.proto

#include "google/cloud/bigquery/jobs/v2/jobs_client.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace bigquery_jobs_v2 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

JobsClient::JobsClient(std::shared_ptr<JobsConnection> connection, Options opts)
    : connection_(std::move(connection)),
      options_(
          internal::MergeOptions(std::move(opts), connection_->options())) {}
JobsClient::~JobsClient() = default;

StatusOr<google::cloud::cpp::bigquery::v2::JobCancelResponse>
JobsClient::Cancel(std::string const& project_id, std::string const& job_id,
                   Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::bigquery::jobs::v2::CancelRequest request;
  request.set_project_id(project_id);
  request.set_job_id(job_id);
  return connection_->Cancel(request);
}

StatusOr<google::cloud::cpp::bigquery::v2::JobCancelResponse>
JobsClient::Cancel(
    google::cloud::cpp::bigquery::jobs::v2::CancelRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->Cancel(request);
}

Status JobsClient::DeleteJob(std::string const& project_id,
                             std::string const& job_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::bigquery::jobs::v2::DeleteJobRequest request;
  request.set_project_id(project_id);
  request.set_job_id(job_id);
  return connection_->DeleteJob(request);
}

Status JobsClient::DeleteJob(
    google::cloud::cpp::bigquery::jobs::v2::DeleteJobRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteJob(request);
}

StatusOr<google::cloud::cpp::bigquery::v2::Job> JobsClient::GetJob(
    std::string const& project_id, std::string const& job_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::bigquery::jobs::v2::GetJobRequest request;
  request.set_project_id(project_id);
  request.set_job_id(job_id);
  return connection_->GetJob(request);
}

StatusOr<google::cloud::cpp::bigquery::v2::Job> JobsClient::GetJob(
    google::cloud::cpp::bigquery::jobs::v2::GetJobRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetJob(request);
}

StatusOr<google::cloud::cpp::bigquery::v2::GetQueryResultsResponse>
JobsClient::GetQueryResults(std::string const& project_id,
                            std::string const& job_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::bigquery::jobs::v2::GetQueryResultsRequest request;
  request.set_project_id(project_id);
  request.set_job_id(job_id);
  return connection_->GetQueryResults(request);
}

StatusOr<google::cloud::cpp::bigquery::v2::GetQueryResultsResponse>
JobsClient::GetQueryResults(
    google::cloud::cpp::bigquery::jobs::v2::GetQueryResultsRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetQueryResults(request);
}

StatusOr<google::cloud::cpp::bigquery::v2::Job> JobsClient::InsertJob(
    std::string const& project_id,
    google::cloud::cpp::bigquery::v2::Job const& job_resource, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::bigquery::jobs::v2::InsertJobRequest request;
  request.set_project_id(project_id);
  *request.mutable_job_resource() = job_resource;
  return connection_->InsertJob(request);
}

StatusOr<google::cloud::cpp::bigquery::v2::Job> JobsClient::InsertJob(
    google::cloud::cpp::bigquery::jobs::v2::InsertJobRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->InsertJob(request);
}

StatusOr<google::cloud::cpp::bigquery::v2::JobList> JobsClient::ListJobs(
    std::string const& project_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::bigquery::jobs::v2::ListJobsRequest request;
  request.set_project_id(project_id);
  return connection_->ListJobs(request);
}

StatusOr<google::cloud::cpp::bigquery::v2::JobList> JobsClient::ListJobs(
    google::cloud::cpp::bigquery::jobs::v2::ListJobsRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListJobs(request);
}

StatusOr<google::cloud::cpp::bigquery::v2::QueryResponse> JobsClient::Query(
    std::string const& project_id,
    google::cloud::cpp::bigquery::v2::QueryRequest const&
        query_request_resource,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::bigquery::jobs::v2::QueryRequest request;
  request.set_project_id(project_id);
  *request.mutable_query_request_resource() = query_request_resource;
  return connection_->Query(request);
}

StatusOr<google::cloud::cpp::bigquery::v2::QueryResponse> JobsClient::Query(
    google::cloud::cpp::bigquery::jobs::v2::QueryRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->Query(request);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace bigquery_jobs_v2
}  // namespace cloud
}  // namespace google
