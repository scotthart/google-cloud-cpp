// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/bigquery/routines/v2/routines.proto

#include "google/cloud/bigquery/routines/v2/routines_client.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace bigquery_routines_v2 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

RoutinesClient::RoutinesClient(std::shared_ptr<RoutinesConnection> connection,
                               Options opts)
    : connection_(std::move(connection)),
      options_(
          internal::MergeOptions(std::move(opts), connection_->options())) {}
RoutinesClient::~RoutinesClient() = default;

Status RoutinesClient::DeleteRoutine(std::string const& project_id,
                                     std::string const& dataset_id,
                                     std::string const& routine_id,
                                     Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::bigquery::routines::v2::DeleteRoutineRequest request;
  request.set_project_id(project_id);
  request.set_dataset_id(dataset_id);
  request.set_routine_id(routine_id);
  return connection_->DeleteRoutine(request);
}

Status RoutinesClient::DeleteRoutine(
    google::cloud::cpp::bigquery::routines::v2::DeleteRoutineRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteRoutine(request);
}

StatusOr<google::cloud::cpp::bigquery::v2::Routine> RoutinesClient::GetRoutine(
    std::string const& project_id, std::string const& dataset_id,
    std::string const& routine_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::bigquery::routines::v2::GetRoutineRequest request;
  request.set_project_id(project_id);
  request.set_dataset_id(dataset_id);
  request.set_routine_id(routine_id);
  return connection_->GetRoutine(request);
}

StatusOr<google::cloud::cpp::bigquery::v2::Routine> RoutinesClient::GetRoutine(
    google::cloud::cpp::bigquery::routines::v2::GetRoutineRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetRoutine(request);
}

StatusOr<google::cloud::cpp::bigquery::v2::Routine>
RoutinesClient::InsertRoutine(
    std::string const& project_id, std::string const& dataset_id,
    google::cloud::cpp::bigquery::v2::Routine const& routine_resource,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::bigquery::routines::v2::InsertRoutineRequest request;
  request.set_project_id(project_id);
  request.set_dataset_id(dataset_id);
  *request.mutable_routine_resource() = routine_resource;
  return connection_->InsertRoutine(request);
}

StatusOr<google::cloud::cpp::bigquery::v2::Routine>
RoutinesClient::InsertRoutine(
    google::cloud::cpp::bigquery::routines::v2::InsertRoutineRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->InsertRoutine(request);
}

StatusOr<google::cloud::cpp::bigquery::v2::ListRoutinesResponse>
RoutinesClient::ListRoutines(std::string const& project_id,
                             std::string const& dataset_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::bigquery::routines::v2::ListRoutinesRequest request;
  request.set_project_id(project_id);
  request.set_dataset_id(dataset_id);
  return connection_->ListRoutines(request);
}

StatusOr<google::cloud::cpp::bigquery::v2::ListRoutinesResponse>
RoutinesClient::ListRoutines(
    google::cloud::cpp::bigquery::routines::v2::ListRoutinesRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListRoutines(request);
}

StatusOr<google::cloud::cpp::bigquery::v2::Routine>
RoutinesClient::UpdateRoutine(
    std::string const& project_id, std::string const& dataset_id,
    std::string const& routine_id,
    google::cloud::cpp::bigquery::v2::Routine const& routine_resource,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::bigquery::routines::v2::UpdateRoutineRequest request;
  request.set_project_id(project_id);
  request.set_dataset_id(dataset_id);
  request.set_routine_id(routine_id);
  *request.mutable_routine_resource() = routine_resource;
  return connection_->UpdateRoutine(request);
}

StatusOr<google::cloud::cpp::bigquery::v2::Routine>
RoutinesClient::UpdateRoutine(
    google::cloud::cpp::bigquery::routines::v2::UpdateRoutineRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateRoutine(request);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace bigquery_routines_v2
}  // namespace cloud
}  // namespace google
