// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/bigquery/routines/v2/routines.proto

#include "google/cloud/bigquery/routines/v2/internal/routines_tracing_connection.h"
#include "google/cloud/internal/opentelemetry.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace bigquery_routines_v2_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

RoutinesTracingConnection::RoutinesTracingConnection(
    std::shared_ptr<bigquery_routines_v2::RoutinesConnection> child)
    : child_(std::move(child)) {}

Status RoutinesTracingConnection::DeleteRoutine(
    google::cloud::cpp::bigquery::routines::v2::DeleteRoutineRequest const&
        request) {
  auto span = internal::MakeSpan(
      "bigquery_routines_v2::RoutinesConnection::DeleteRoutine");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->DeleteRoutine(request));
}

StatusOr<google::cloud::cpp::bigquery::v2::Routine>
RoutinesTracingConnection::GetRoutine(
    google::cloud::cpp::bigquery::routines::v2::GetRoutineRequest const&
        request) {
  auto span = internal::MakeSpan(
      "bigquery_routines_v2::RoutinesConnection::GetRoutine");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->GetRoutine(request));
}

StatusOr<google::cloud::cpp::bigquery::v2::Routine>
RoutinesTracingConnection::InsertRoutine(
    google::cloud::cpp::bigquery::routines::v2::InsertRoutineRequest const&
        request) {
  auto span = internal::MakeSpan(
      "bigquery_routines_v2::RoutinesConnection::InsertRoutine");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->InsertRoutine(request));
}

StatusOr<google::cloud::cpp::bigquery::v2::ListRoutinesResponse>
RoutinesTracingConnection::ListRoutines(
    google::cloud::cpp::bigquery::routines::v2::ListRoutinesRequest const&
        request) {
  auto span = internal::MakeSpan(
      "bigquery_routines_v2::RoutinesConnection::ListRoutines");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->ListRoutines(request));
}

StatusOr<google::cloud::cpp::bigquery::v2::Routine>
RoutinesTracingConnection::UpdateRoutine(
    google::cloud::cpp::bigquery::routines::v2::UpdateRoutineRequest const&
        request) {
  auto span = internal::MakeSpan(
      "bigquery_routines_v2::RoutinesConnection::UpdateRoutine");
  auto scope = opentelemetry::trace::Scope(span);
  return internal::EndSpan(*span, child_->UpdateRoutine(request));
}

#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY

std::shared_ptr<bigquery_routines_v2::RoutinesConnection>
MakeRoutinesTracingConnection(
    std::shared_ptr<bigquery_routines_v2::RoutinesConnection> conn) {
#ifdef GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  if (internal::TracingEnabled(conn->options())) {
    conn = std::make_shared<RoutinesTracingConnection>(std::move(conn));
  }
#endif  // GOOGLE_CLOUD_CPP_HAVE_OPENTELEMETRY
  return conn;
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace bigquery_routines_v2_internal
}  // namespace cloud
}  // namespace google
