// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/bigquery/routines/v2/routines.proto

#include "google/cloud/bigquery/routines/v2/internal/routines_rest_stub.h"
#include "google/cloud/common_options.h"
#include "google/cloud/internal/absl_str_cat_quiet.h"
#include "google/cloud/internal/rest_stub_helpers.h"
#include "google/cloud/status_or.h"
#include <google/cloud/bigquery/routines/v2/routines.pb.h>
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace bigquery_routines_v2_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

DefaultRoutinesRestStub::DefaultRoutinesRestStub(Options options)
    : service_(rest_internal::MakePooledRestClient(
          options.get<EndpointOption>(), options)),
      options_(std::move(options)) {}

DefaultRoutinesRestStub::DefaultRoutinesRestStub(
    std::shared_ptr<rest_internal::RestClient> service, Options options)
    : service_(std::move(service)), options_(std::move(options)) {}

Status DefaultRoutinesRestStub::DeleteRoutine(
    google::cloud::rest_internal::RestContext& rest_context,
    Options const& options,
    google::cloud::cpp::bigquery::routines::v2::DeleteRoutineRequest const&
        request) {
  return rest_internal::Delete(
      *service_, rest_context, request, false,
      absl::StrCat("/", "bigquery", "/",
                   rest_internal::DetermineApiVersion("v2", options), "/",
                   "projects", "/", request.project_id(), "/", "datasets", "/",
                   request.dataset_id(), "/", "routines", "/",
                   request.routine_id()));
}

StatusOr<google::cloud::cpp::bigquery::v2::Routine>
DefaultRoutinesRestStub::GetRoutine(
    google::cloud::rest_internal::RestContext& rest_context,
    Options const& options,
    google::cloud::cpp::bigquery::routines::v2::GetRoutineRequest const&
        request) {
  return rest_internal::Get<google::cloud::cpp::bigquery::v2::Routine>(
      *service_, rest_context, request, false,
      absl::StrCat("/", "bigquery", "/",
                   rest_internal::DetermineApiVersion("v2", options), "/",
                   "projects", "/", request.project_id(), "/", "datasets", "/",
                   request.dataset_id(), "/", "routines", "/",
                   request.routine_id()),
      rest_internal::TrimEmptyQueryParameters(
          {std::make_pair("read_mask", request.read_mask())}));
}

StatusOr<google::cloud::cpp::bigquery::v2::Routine>
DefaultRoutinesRestStub::InsertRoutine(
    google::cloud::rest_internal::RestContext& rest_context,
    Options const& options,
    google::cloud::cpp::bigquery::routines::v2::InsertRoutineRequest const&
        request) {
  return rest_internal::Post<google::cloud::cpp::bigquery::v2::Routine>(
      *service_, rest_context, request.routine_resource(), false,
      absl::StrCat("/", "bigquery", "/",
                   rest_internal::DetermineApiVersion("v2", options), "/",
                   "projects", "/", request.project_id(), "/", "datasets", "/",
                   request.dataset_id(), "/", "routines"));
}

StatusOr<google::cloud::cpp::bigquery::v2::ListRoutinesResponse>
DefaultRoutinesRestStub::ListRoutines(
    google::cloud::rest_internal::RestContext& rest_context,
    Options const& options,
    google::cloud::cpp::bigquery::routines::v2::ListRoutinesRequest const&
        request) {
  return rest_internal::Get<
      google::cloud::cpp::bigquery::v2::ListRoutinesResponse>(
      *service_, rest_context, request, false,
      absl::StrCat("/", "bigquery", "/",
                   rest_internal::DetermineApiVersion("v2", options), "/",
                   "projects", "/", request.project_id(), "/", "datasets", "/",
                   request.dataset_id(), "/", "routines"),
      rest_internal::TrimEmptyQueryParameters(
          {std::make_pair("filter", request.filter()),
           std::make_pair("max_results", std::to_string(request.max_results())),
           std::make_pair("page_token", request.page_token()),
           std::make_pair("read_mask", request.read_mask())}));
}

StatusOr<google::cloud::cpp::bigquery::v2::Routine>
DefaultRoutinesRestStub::UpdateRoutine(
    google::cloud::rest_internal::RestContext& rest_context,
    Options const& options,
    google::cloud::cpp::bigquery::routines::v2::UpdateRoutineRequest const&
        request) {
  return rest_internal::Put<google::cloud::cpp::bigquery::v2::Routine>(
      *service_, rest_context, request.routine_resource(), false,
      absl::StrCat("/", "bigquery", "/",
                   rest_internal::DetermineApiVersion("v2", options), "/",
                   "projects", "/", request.project_id(), "/", "datasets", "/",
                   request.dataset_id(), "/", "routines", "/",
                   request.routine_id()));
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace bigquery_routines_v2_internal
}  // namespace cloud
}  // namespace google
