// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/bigquery/projects/v2/projects.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_BIGQUERY_PROJECTS_V2_PROJECTS_CLIENT_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_BIGQUERY_PROJECTS_V2_PROJECTS_CLIENT_H

#include "google/cloud/bigquery/projects/v2/projects_rest_connection.h"
#include "google/cloud/future.h"
#include "google/cloud/options.h"
#include "google/cloud/polling_policy.h"
#include "google/cloud/status_or.h"
#include "google/cloud/version.h"
#include <memory>
#include <string>

namespace google {
namespace cloud {
namespace bigquery_projects_v2 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

///
/// Service for the projects resource.
/// https://cloud.google.com/bigquery/docs/reference/rest/v2/projects
///
/// @par Equality
///
/// Instances of this class created via copy-construction or copy-assignment
/// always compare equal. Instances created with equal
/// `std::shared_ptr<*Connection>` objects compare equal. Objects that compare
/// equal share the same underlying resources.
///
/// @par Performance
///
/// Creating a new instance of this class is a relatively expensive operation,
/// new objects establish new connections to the service. In contrast,
/// copy-construction, move-construction, and the corresponding assignment
/// operations are relatively efficient as the copies share all underlying
/// resources.
///
/// @par Thread Safety
///
/// Concurrent access to different instances of this class, even if they compare
/// equal, is guaranteed to work. Two or more threads operating on the same
/// instance of this class is not guaranteed to work. Since copy-construction
/// and move-construction is a relatively efficient operation, consider using
/// such a copy when using this class from multiple threads.
///
class ProjectsClient {
 public:
  explicit ProjectsClient(std::shared_ptr<ProjectsConnection> connection,
                          Options opts = {});
  ~ProjectsClient();

  ///@{
  /// @name Copy and move support
  ProjectsClient(ProjectsClient const&) = default;
  ProjectsClient& operator=(ProjectsClient const&) = default;
  ProjectsClient(ProjectsClient&&) = default;
  ProjectsClient& operator=(ProjectsClient&&) = default;
  ///@}

  ///@{
  /// @name Equality
  friend bool operator==(ProjectsClient const& a, ProjectsClient const& b) {
    return a.connection_ == b.connection_;
  }
  friend bool operator!=(ProjectsClient const& a, ProjectsClient const& b) {
    return !(a == b);
  }
  ///@}

  // clang-format off
  ///
  /// RPC to get the service account for a project used for interactions with
  /// Google Cloud KMS
  /// https://cloud.google.com/bigquery/docs/reference/rest/v2/projects/getServiceAccount
  ///
  /// @param project_id  Required. ID of the project.
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return the result of the RPC. The response message type
  ///     ([google.cloud.cpp.bigquery.v2.GetServiceAccountResponse])
  ///     is mapped to a C++ class using the [Protobuf mapping rules].
  ///     If the request fails, the [`StatusOr`] contains the error details.
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.cloud.cpp.bigquery.projects.v2.GetServiceAccountRequest]: @cloud_cpp_reference_link{google/cloud/bigquery/projects/v2/projects.proto#L63}
  /// [google.cloud.cpp.bigquery.v2.GetServiceAccountResponse]: @cloud_cpp_reference_link{google/cloud/bigquery/v2/internal/common_011.proto#L25}
  ///
  // clang-format on
  StatusOr<google::cloud::cpp::bigquery::v2::GetServiceAccountResponse>
  GetServiceAccount(std::string const& project_id, Options opts = {});

  // clang-format off
  ///
  /// RPC to get the service account for a project used for interactions with
  /// Google Cloud KMS
  /// https://cloud.google.com/bigquery/docs/reference/rest/v2/projects/getServiceAccount
  ///
  /// @param request Unary RPCs, such as the one wrapped by this
  ///     function, receive a single `request` proto message which includes all
  ///     the inputs for the RPC. In this case, the proto message is a
  ///     [google.cloud.cpp.bigquery.projects.v2.GetServiceAccountRequest].
  ///     Proto messages are converted to C++ classes by Protobuf, using the
  ///     [Protobuf mapping rules].
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return the result of the RPC. The response message type
  ///     ([google.cloud.cpp.bigquery.v2.GetServiceAccountResponse])
  ///     is mapped to a C++ class using the [Protobuf mapping rules].
  ///     If the request fails, the [`StatusOr`] contains the error details.
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.cloud.cpp.bigquery.projects.v2.GetServiceAccountRequest]: @cloud_cpp_reference_link{google/cloud/bigquery/projects/v2/projects.proto#L63}
  /// [google.cloud.cpp.bigquery.v2.GetServiceAccountResponse]: @cloud_cpp_reference_link{google/cloud/bigquery/v2/internal/common_011.proto#L25}
  ///
  // clang-format on
  StatusOr<google::cloud::cpp::bigquery::v2::GetServiceAccountResponse>
  GetServiceAccount(google::cloud::cpp::bigquery::projects::v2::
                        GetServiceAccountRequest const& request,
                    Options opts = {});

  // clang-format off
  ///
  /// RPC to list projects to which the user has been granted any project role.
  /// Users of this method are encouraged to consider the [Resource
  /// Manager](https://cloud.google.com/resource-manager/docs/) API, which
  /// provides the underlying data for this method and has more capabilities.
  /// https://cloud.google.com/bigquery/docs/reference/rest/v2/projects/list
  ///
  /// @param request Unary RPCs, such as the one wrapped by this
  ///     function, receive a single `request` proto message which includes all
  ///     the inputs for the RPC. In this case, the proto message is a
  ///     [google.cloud.cpp.bigquery.projects.v2.ListProjectsRequest].
  ///     Proto messages are converted to C++ classes by Protobuf, using the
  ///     [Protobuf mapping rules].
  /// @param opts Optional. Override the class-level options, such as retry and
  ///     backoff policies.
  /// @return the result of the RPC. The response message type
  ///     ([google.cloud.cpp.bigquery.v2.ProjectList])
  ///     is mapped to a C++ class using the [Protobuf mapping rules].
  ///     If the request fails, the [`StatusOr`] contains the error details.
  ///
  /// [Protobuf mapping rules]: https://protobuf.dev/reference/cpp/cpp-generated/
  /// [input iterator requirements]: https://en.cppreference.com/w/cpp/named_req/InputIterator
  /// [`std::string`]: https://en.cppreference.com/w/cpp/string/basic_string
  /// [`future`]: @ref google::cloud::future
  /// [`StatusOr`]: @ref google::cloud::StatusOr
  /// [`Status`]: @ref google::cloud::Status
  /// [google.cloud.cpp.bigquery.projects.v2.ListProjectsRequest]: @cloud_cpp_reference_link{google/cloud/bigquery/projects/v2/projects.proto#L70}
  /// [google.cloud.cpp.bigquery.v2.ProjectList]: @cloud_cpp_reference_link{google/cloud/bigquery/v2/internal/common_011.proto#L34}
  ///
  // clang-format on
  StatusOr<google::cloud::cpp::bigquery::v2::ProjectList> ListProjects(
      google::cloud::cpp::bigquery::projects::v2::ListProjectsRequest const&
          request,
      Options opts = {});

 private:
  std::shared_ptr<ProjectsConnection> connection_;
  Options options_;
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace bigquery_projects_v2
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_BIGQUERY_PROJECTS_V2_PROJECTS_CLIENT_H
