// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/bigquery/datasets/v2/datasets.proto

#include "google/cloud/bigquery/datasets/v2/datasets_client.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace bigquery_datasets_v2 {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

DatasetsClient::DatasetsClient(std::shared_ptr<DatasetsConnection> connection,
                               Options opts)
    : connection_(std::move(connection)),
      options_(
          internal::MergeOptions(std::move(opts), connection_->options())) {}
DatasetsClient::~DatasetsClient() = default;

Status DatasetsClient::DeleteDataset(std::string const& project_id,
                                     std::string const& dataset_id,
                                     Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::bigquery::datasets::v2::DeleteDatasetRequest request;
  request.set_project_id(project_id);
  request.set_dataset_id(dataset_id);
  return connection_->DeleteDataset(request);
}

Status DatasetsClient::DeleteDataset(
    google::cloud::cpp::bigquery::datasets::v2::DeleteDatasetRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->DeleteDataset(request);
}

StatusOr<google::cloud::cpp::bigquery::v2::Dataset> DatasetsClient::GetDataset(
    std::string const& project_id, std::string const& dataset_id,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::bigquery::datasets::v2::GetDatasetRequest request;
  request.set_project_id(project_id);
  request.set_dataset_id(dataset_id);
  return connection_->GetDataset(request);
}

StatusOr<google::cloud::cpp::bigquery::v2::Dataset> DatasetsClient::GetDataset(
    google::cloud::cpp::bigquery::datasets::v2::GetDatasetRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->GetDataset(request);
}

StatusOr<google::cloud::cpp::bigquery::v2::Dataset>
DatasetsClient::InsertDataset(
    std::string const& project_id,
    google::cloud::cpp::bigquery::v2::Dataset const& dataset_resource,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::bigquery::datasets::v2::InsertDatasetRequest request;
  request.set_project_id(project_id);
  *request.mutable_dataset_resource() = dataset_resource;
  return connection_->InsertDataset(request);
}

StatusOr<google::cloud::cpp::bigquery::v2::Dataset>
DatasetsClient::InsertDataset(
    google::cloud::cpp::bigquery::datasets::v2::InsertDatasetRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->InsertDataset(request);
}

StatusOr<google::cloud::cpp::bigquery::v2::DatasetList>
DatasetsClient::ListDatasets(std::string const& project_id, Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::bigquery::datasets::v2::ListDatasetsRequest request;
  request.set_project_id(project_id);
  return connection_->ListDatasets(request);
}

StatusOr<google::cloud::cpp::bigquery::v2::DatasetList>
DatasetsClient::ListDatasets(
    google::cloud::cpp::bigquery::datasets::v2::ListDatasetsRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->ListDatasets(request);
}

StatusOr<google::cloud::cpp::bigquery::v2::Dataset>
DatasetsClient::PatchDataset(
    std::string const& project_id, std::string const& dataset_id,
    google::cloud::cpp::bigquery::v2::Dataset const& dataset_resource,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::bigquery::datasets::v2::PatchDatasetRequest request;
  request.set_project_id(project_id);
  request.set_dataset_id(dataset_id);
  *request.mutable_dataset_resource() = dataset_resource;
  return connection_->PatchDataset(request);
}

StatusOr<google::cloud::cpp::bigquery::v2::Dataset>
DatasetsClient::PatchDataset(
    google::cloud::cpp::bigquery::datasets::v2::PatchDatasetRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->PatchDataset(request);
}

StatusOr<google::cloud::cpp::bigquery::v2::Dataset> DatasetsClient::Undelete(
    std::string const& project_id, std::string const& dataset_id,
    google::cloud::cpp::bigquery::v2::UndeleteDatasetRequest const&
        undelete_dataset_request_resource,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::bigquery::datasets::v2::UndeleteRequest request;
  request.set_project_id(project_id);
  request.set_dataset_id(dataset_id);
  *request.mutable_undelete_dataset_request_resource() =
      undelete_dataset_request_resource;
  return connection_->Undelete(request);
}

StatusOr<google::cloud::cpp::bigquery::v2::Dataset> DatasetsClient::Undelete(
    google::cloud::cpp::bigquery::datasets::v2::UndeleteRequest const& request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->Undelete(request);
}

StatusOr<google::cloud::cpp::bigquery::v2::Dataset>
DatasetsClient::UpdateDataset(
    std::string const& project_id, std::string const& dataset_id,
    google::cloud::cpp::bigquery::v2::Dataset const& dataset_resource,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  google::cloud::cpp::bigquery::datasets::v2::UpdateDatasetRequest request;
  request.set_project_id(project_id);
  request.set_dataset_id(dataset_id);
  *request.mutable_dataset_resource() = dataset_resource;
  return connection_->UpdateDataset(request);
}

StatusOr<google::cloud::cpp::bigquery::v2::Dataset>
DatasetsClient::UpdateDataset(
    google::cloud::cpp::bigquery::datasets::v2::UpdateDatasetRequest const&
        request,
    Options opts) {
  internal::OptionsSpan span(internal::MergeOptions(std::move(opts), options_));
  return connection_->UpdateDataset(request);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace bigquery_datasets_v2
}  // namespace cloud
}  // namespace google
