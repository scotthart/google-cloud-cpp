// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/bigquery/datasets/v2/datasets.proto

#ifndef GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_BIGQUERY_DATASETS_V2_MOCKS_MOCK_DATASETS_CONNECTION_H
#define GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_BIGQUERY_DATASETS_V2_MOCKS_MOCK_DATASETS_CONNECTION_H

#include "google/cloud/bigquery/datasets/v2/datasets_connection.h"
#include <gmock/gmock.h>

namespace google {
namespace cloud {
namespace bigquery_datasets_v2_mocks {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

/**
 * A class to mock `DatasetsConnection`.
 *
 * Application developers may want to test their code with simulated responses,
 * including errors, from an object of type `DatasetsClient`. To do so,
 * construct an object of type `DatasetsClient` with an instance of this
 * class. Then use the Google Test framework functions to program the behavior
 * of this mock.
 *
 * @see [This example][bq-mock] for how to test your application with GoogleTest.
 * While the example showcases types from the BigQuery library, the underlying
 * principles apply for any pair of `*Client` and `*Connection`.
 *
 * [bq-mock]: @cloud_cpp_docs_link{bigquery,bigquery-read-mock}
 */
class MockDatasetsConnection : public bigquery_datasets_v2::DatasetsConnection {
 public:
  MOCK_METHOD(Options, options, (), (override));

  MOCK_METHOD(
      Status, DeleteDataset,
      (google::cloud::cpp::bigquery::datasets::v2::DeleteDatasetRequest const&
           request),
      (override));

  MOCK_METHOD(
      StatusOr<google::cloud::cpp::bigquery::v2::Dataset>, GetDataset,
      (google::cloud::cpp::bigquery::datasets::v2::GetDatasetRequest const&
           request),
      (override));

  MOCK_METHOD(
      StatusOr<google::cloud::cpp::bigquery::v2::Dataset>, InsertDataset,
      (google::cloud::cpp::bigquery::datasets::v2::InsertDatasetRequest const&
           request),
      (override));

  MOCK_METHOD(
      StatusOr<google::cloud::cpp::bigquery::v2::DatasetList>, ListDatasets,
      (google::cloud::cpp::bigquery::datasets::v2::ListDatasetsRequest const&
           request),
      (override));

  MOCK_METHOD(
      StatusOr<google::cloud::cpp::bigquery::v2::Dataset>, PatchDataset,
      (google::cloud::cpp::bigquery::datasets::v2::PatchDatasetRequest const&
           request),
      (override));

  MOCK_METHOD(
      StatusOr<google::cloud::cpp::bigquery::v2::Dataset>, Undelete,
      (google::cloud::cpp::bigquery::datasets::v2::UndeleteRequest const&
           request),
      (override));

  MOCK_METHOD(
      StatusOr<google::cloud::cpp::bigquery::v2::Dataset>, UpdateDataset,
      (google::cloud::cpp::bigquery::datasets::v2::UpdateDatasetRequest const&
           request),
      (override));
};

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace bigquery_datasets_v2_mocks
}  // namespace cloud
}  // namespace google

#endif  // GOOGLE_CLOUD_CPP_GOOGLE_CLOUD_BIGQUERY_DATASETS_V2_MOCKS_MOCK_DATASETS_CONNECTION_H
