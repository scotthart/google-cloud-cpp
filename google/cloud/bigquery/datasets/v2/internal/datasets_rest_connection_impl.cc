// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the Codegen C++ plugin.
// If you make any local changes, they will be lost.
// source: google/cloud/bigquery/datasets/v2/datasets.proto

#include "google/cloud/bigquery/datasets/v2/internal/datasets_rest_connection_impl.h"
#include "google/cloud/bigquery/datasets/v2/internal/datasets_rest_stub_factory.h"
#include "google/cloud/common_options.h"
#include "google/cloud/credentials.h"
#include "google/cloud/internal/rest_retry_loop.h"
#include "google/cloud/rest_options.h"
#include <memory>
#include <utility>

namespace google {
namespace cloud {
namespace bigquery_datasets_v2_internal {
GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_BEGIN

DatasetsRestConnectionImpl::DatasetsRestConnectionImpl(
    std::unique_ptr<google::cloud::BackgroundThreads> background,
    std::shared_ptr<bigquery_datasets_v2_internal::DatasetsRestStub> stub,
    Options options)
    : background_(std::move(background)),
      stub_(std::move(stub)),
      options_(internal::MergeOptions(std::move(options),
                                      DatasetsConnection::options())) {}

Status DatasetsRestConnectionImpl::DeleteDataset(
    google::cloud::cpp::bigquery::datasets::v2::DeleteDatasetRequest const&
        request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->DeleteDataset(request),
      [this](rest_internal::RestContext& rest_context, Options const& options,
             google::cloud::cpp::bigquery::datasets::v2::
                 DeleteDatasetRequest const& request) {
        return stub_->DeleteDataset(rest_context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::cloud::cpp::bigquery::v2::Dataset>
DatasetsRestConnectionImpl::GetDataset(
    google::cloud::cpp::bigquery::datasets::v2::GetDatasetRequest const&
        request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->GetDataset(request),
      [this](
          rest_internal::RestContext& rest_context, Options const& options,
          google::cloud::cpp::bigquery::datasets::v2::GetDatasetRequest const&
              request) {
        return stub_->GetDataset(rest_context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::cloud::cpp::bigquery::v2::Dataset>
DatasetsRestConnectionImpl::InsertDataset(
    google::cloud::cpp::bigquery::datasets::v2::InsertDatasetRequest const&
        request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->InsertDataset(request),
      [this](rest_internal::RestContext& rest_context, Options const& options,
             google::cloud::cpp::bigquery::datasets::v2::
                 InsertDatasetRequest const& request) {
        return stub_->InsertDataset(rest_context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::cloud::cpp::bigquery::v2::DatasetList>
DatasetsRestConnectionImpl::ListDatasets(
    google::cloud::cpp::bigquery::datasets::v2::ListDatasetsRequest const&
        request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->ListDatasets(request),
      [this](
          rest_internal::RestContext& rest_context, Options const& options,
          google::cloud::cpp::bigquery::datasets::v2::ListDatasetsRequest const&
              request) {
        return stub_->ListDatasets(rest_context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::cloud::cpp::bigquery::v2::Dataset>
DatasetsRestConnectionImpl::PatchDataset(
    google::cloud::cpp::bigquery::datasets::v2::PatchDatasetRequest const&
        request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->PatchDataset(request),
      [this](
          rest_internal::RestContext& rest_context, Options const& options,
          google::cloud::cpp::bigquery::datasets::v2::PatchDatasetRequest const&
              request) {
        return stub_->PatchDataset(rest_context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::cloud::cpp::bigquery::v2::Dataset>
DatasetsRestConnectionImpl::Undelete(
    google::cloud::cpp::bigquery::datasets::v2::UndeleteRequest const&
        request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->Undelete(request),
      [this](rest_internal::RestContext& rest_context, Options const& options,
             google::cloud::cpp::bigquery::datasets::v2::UndeleteRequest const&
                 request) {
        return stub_->Undelete(rest_context, options, request);
      },
      *current, request, __func__);
}

StatusOr<google::cloud::cpp::bigquery::v2::Dataset>
DatasetsRestConnectionImpl::UpdateDataset(
    google::cloud::cpp::bigquery::datasets::v2::UpdateDatasetRequest const&
        request) {
  auto current = google::cloud::internal::SaveCurrentOptions();
  return google::cloud::rest_internal::RestRetryLoop(
      retry_policy(*current), backoff_policy(*current),
      idempotency_policy(*current)->UpdateDataset(request),
      [this](rest_internal::RestContext& rest_context, Options const& options,
             google::cloud::cpp::bigquery::datasets::v2::
                 UpdateDatasetRequest const& request) {
        return stub_->UpdateDataset(rest_context, options, request);
      },
      *current, request, __func__);
}

GOOGLE_CLOUD_CPP_INLINE_NAMESPACE_END
}  // namespace bigquery_datasets_v2_internal
}  // namespace cloud
}  // namespace google
