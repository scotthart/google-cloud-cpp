// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the C++ microgenerator.
// If you make any local changes, they will be lost.
// file:///workspace/generator/discovery/bigquery_public_google_rest_v2.json
// revision: 20240124

syntax = "proto3";

package google.cloud.cpp.bigquery.v2;

// The data type of a variable such as a function argument. Examples include: *
// INT64: `{"typeKind": "INT64"}` * ARRAY: { "typeKind": "ARRAY",
// "arrayElementType": {"typeKind": "STRING"} } * STRUCT>: { "typeKind":
// "STRUCT", "structType": { "fields": [ { "name": "x", "type": {"typeKind":
// "STRING"} }, { "name": "y", "type": { "typeKind": "ARRAY",
// "arrayElementType": {"typeKind": "DATE"} } } ] } }
message StandardSqlDataType {
  // The type of the array's elements, if type_kind = "ARRAY".
  optional StandardSqlDataType array_element_type = 1
      [json_name = "arrayElementType"];

  // The type of the range's elements, if type_kind = "RANGE".
  optional StandardSqlDataType range_element_type = 2
      [json_name = "rangeElementType"];

  // The fields of this struct, in order, if type_kind = "STRUCT".
  optional StandardSqlStructType struct_type = 3 [json_name = "structType"];

  // Required. The top level type of this field. Can be any GoogleSQL data type
  // (e.g., "INT64", "DATE", "ARRAY").
  // TYPE_KIND_UNSPECIFIED: Invalid type.
  // INT64: Encoded as a string in decimal format.
  // BOOL: Encoded as a boolean "false" or "true".
  // FLOAT64: Encoded as a number, or string "NaN", "Infinity" or "-Infinity".
  // STRING: Encoded as a string value.
  // BYTES: Encoded as a base64 string per RFC 4648, section 4.
  // TIMESTAMP: Encoded as an RFC 3339 timestamp with mandatory "Z" time zone
  // string: 1985-04-12T23:20:50.52Z
  // DATE: Encoded as RFC 3339 full-date format string: 1985-04-12
  // TIME: Encoded as RFC 3339 partial-time format string: 23:20:50.52
  // DATETIME: Encoded as RFC 3339 full-date "T" partial-time:
  // 1985-04-12T23:20:50.52
  // INTERVAL: Encoded as fully qualified 3 part: 0-5 15 2:30:45.6
  // GEOGRAPHY: Encoded as WKT
  // NUMERIC: Encoded as a decimal string.
  // BIGNUMERIC: Encoded as a decimal string.
  // JSON: Encoded as a string.
  // ARRAY: Encoded as a list with types matching Type.array_type.
  // STRUCT: Encoded as a list with fields of type Type.struct_type[i]. List is
  // used because a JSON object cannot have duplicate field names.
  // RANGE: Encoded as a pair with types matching range_element_type. Pairs must
  // begin with "[", end with ")", and be separated by ", ".
  optional string type_kind = 4 [json_name = "typeKind"];
}

// A field or a column.
message StandardSqlField {
  // Optional. The name of this field. Can be absent for struct fields.
  optional string name = 1 [json_name = "name"];

  // Optional. The type of this parameter. Absent if not explicitly specified
  // (e.g., CREATE FUNCTION statement can omit the return type; in this case the
  // output parameter does not have this "type" field).
  optional StandardSqlDataType type = 2 [json_name = "type"];
}

// The representation of a SQL STRUCT type.
message StandardSqlStructType {
  // Fields within the struct.
  repeated StandardSqlField fields = 1 [json_name = "fields"];
}
