// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the C++ microgenerator.
// If you make any local changes, they will be lost.
// file:///workspace/generator/discovery/bigquery_public_google_rest_v2.json
// revision: 20240124

syntax = "proto3";

package google.cloud.cpp.bigquery.datasets.v2;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/cloud/bigquery/v2/internal/common_007.proto";
import "google/protobuf/empty.proto";

// Service for the datasets resource.
// https://cloud.google.com/bigquery/docs/reference/rest/v2/datasets
service Datasets {
  option (google.api.default_host) = "bigquery.googleapis.com";
  option (google.api.oauth_scopes) =
      "https://www.googleapis.com/auth/bigquery,"
      "https://www.googleapis.com/auth/cloud-platform,"
      "https://www.googleapis.com/auth/cloud-platform.read-only";

  // Deletes the dataset specified by the datasetId value. Before you can delete
  // a dataset, you must delete all its tables, either manually or by specifying
  // deleteContents. Immediately after deletion, you can create another dataset
  // with the same name.
  // https://cloud.google.com/bigquery/docs/reference/rest/v2/datasets/delete
  rpc DeleteDataset(DeleteDatasetRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/bigquery/v2/projects/{project_id}/datasets/{dataset_id}"
    };
    option (google.api.method_signature) = "project_id,dataset_id";
  }

  // Returns the dataset specified by datasetID.
  // https://cloud.google.com/bigquery/docs/reference/rest/v2/datasets/get
  rpc GetDataset(GetDatasetRequest)
      returns (google.cloud.cpp.bigquery.v2.Dataset) {
    option (google.api.http) = {
      get: "/bigquery/v2/projects/{project_id}/datasets/{dataset_id}"
    };
    option (google.api.method_signature) = "project_id,dataset_id";
  }

  // Creates a new empty dataset.
  // https://cloud.google.com/bigquery/docs/reference/rest/v2/datasets/insert
  rpc InsertDataset(InsertDatasetRequest)
      returns (google.cloud.cpp.bigquery.v2.Dataset) {
    option (google.api.http) = {
      post: "/bigquery/v2/projects/{project_id}/datasets"
      body: "dataset_resource"
    };
    option (google.api.method_signature) = "project_id,dataset_resource";
  }

  // Lists all datasets in the specified project to which the user has been
  // granted the READER dataset role.
  // https://cloud.google.com/bigquery/docs/reference/rest/v2/datasets/list
  rpc ListDatasets(ListDatasetsRequest)
      returns (google.cloud.cpp.bigquery.v2.DatasetList) {
    option (google.api.http) = {
      get: "/bigquery/v2/projects/{project_id}/datasets"
    };
    option (google.api.method_signature) = "project_id";
  }

  // Updates information in an existing dataset. The update method replaces the
  // entire dataset resource, whereas the patch method only replaces fields that
  // are provided in the submitted dataset resource. This method supports
  // RFC5789 patch semantics.
  // https://cloud.google.com/bigquery/docs/reference/rest/v2/datasets/patch
  rpc PatchDataset(PatchDatasetRequest)
      returns (google.cloud.cpp.bigquery.v2.Dataset) {
    option (google.api.http) = {
      patch: "/bigquery/v2/projects/{project_id}/datasets/{dataset_id}"
      body: "dataset_resource"
    };
    option (google.api.method_signature) =
        "project_id,dataset_id,dataset_resource";
  }

  // Undeletes a dataset which is within time travel window based on datasetId.
  // If a time is specified, the dataset version deleted at that time is
  // undeleted, else the last live version is undeleted.
  // https://cloud.google.com/bigquery/docs/reference/rest/v2/datasets/undelete
  rpc Undelete(UndeleteRequest) returns (google.cloud.cpp.bigquery.v2.Dataset) {
    option (google.api.http) = {
      post: "/bigquery/v2/projects/{project_id}/datasets/{dataset_id}:undelete"
      body: "undelete_dataset_request_resource"
    };
    option (google.api.method_signature) =
        "project_id,dataset_id,undelete_dataset_request_resource";
  }

  // Updates information in an existing dataset. The update method replaces the
  // entire dataset resource, whereas the patch method only replaces fields that
  // are provided in the submitted dataset resource.
  // https://cloud.google.com/bigquery/docs/reference/rest/v2/datasets/update
  rpc UpdateDataset(UpdateDatasetRequest)
      returns (google.cloud.cpp.bigquery.v2.Dataset) {
    option (google.api.http) = {
      put: "/bigquery/v2/projects/{project_id}/datasets/{dataset_id}"
      body: "dataset_resource"
    };
    option (google.api.method_signature) =
        "project_id,dataset_id,dataset_resource";
  }
}

// Request message for DeleteDataset.
message DeleteDatasetRequest {
  // Required. Dataset ID of dataset being deleted
  string dataset_id = 1
      [(google.api.field_behavior) = REQUIRED, json_name = "datasetId"];

  // If True, delete all the tables in the dataset. If False and the dataset
  // contains tables, the request will fail. Default is False
  optional bool delete_contents = 2 [json_name = "deleteContents"];

  // Required. Project ID of the dataset being deleted
  string project_id = 3
      [(google.api.field_behavior) = REQUIRED, json_name = "projectId"];
}

// Request message for GetDataset.
message GetDatasetRequest {
  // Required. Dataset ID of the requested dataset
  string dataset_id = 1
      [(google.api.field_behavior) = REQUIRED, json_name = "datasetId"];

  // Optional. Specifies the view that determines which dataset information is
  // returned. By default, metadata and ACL information are returned.
  // DATASET_VIEW_UNSPECIFIED: The default value. Default to the FULL view.
  // METADATA: Includes metadata information for the dataset, such as location,
  // etag, lastModifiedTime, etc.
  // ACL: Includes ACL information for the dataset, which defines dataset access
  // for one or more entities.
  // FULL: Includes both dataset metadata and ACL information.
  optional string dataset_view = 2 [json_name = "datasetView"];

  // Required. Project ID of the requested dataset
  string project_id = 3
      [(google.api.field_behavior) = REQUIRED, json_name = "projectId"];
}

// Request message for InsertDataset.
message InsertDatasetRequest {
  // The Dataset for this request.
  optional google.cloud.cpp.bigquery.v2.Dataset dataset_resource = 1
      [json_name = "__json_request_body"];

  // Required. Project ID of the new dataset
  string project_id = 2
      [(google.api.field_behavior) = REQUIRED, json_name = "projectId"];
}

// Request message for ListDatasets.
message ListDatasetsRequest {
  // Whether to list all datasets, including hidden ones
  optional bool all = 1 [json_name = "all"];

  // An expression for filtering the results of the request by label. The syntax
  // is \"labels.<name>[:<value>]\". Multiple filters can be ANDed together by
  // connecting with a space. Example: \"labels.department:receiving
  // labels.active\". See [Filtering datasets using
  // labels](/bigquery/docs/labeling-datasets#filtering_datasets_using_labels)
  // for details.
  optional string filter = 2 [json_name = "filter"];

  // The maximum number of results to return in a single response page. Leverage
  // the page tokens to iterate through the entire collection.
  optional uint32 max_results = 3 [json_name = "maxResults"];

  // Page token, returned by a previous call, to request the next page of
  // results
  optional string page_token = 4 [json_name = "pageToken"];

  // Required. Project ID of the datasets to be listed
  string project_id = 5
      [(google.api.field_behavior) = REQUIRED, json_name = "projectId"];
}

// Request message for PatchDataset.
message PatchDatasetRequest {
  // Required. Dataset ID of the dataset being updated
  string dataset_id = 1
      [(google.api.field_behavior) = REQUIRED, json_name = "datasetId"];

  // The Dataset for this request.
  optional google.cloud.cpp.bigquery.v2.Dataset dataset_resource = 2
      [json_name = "__json_request_body"];

  // Required. Project ID of the dataset being updated
  string project_id = 3
      [(google.api.field_behavior) = REQUIRED, json_name = "projectId"];
}

// Request message for Undelete.
message UndeleteRequest {
  // Required. Dataset ID of dataset being deleted
  string dataset_id = 1
      [(google.api.field_behavior) = REQUIRED, json_name = "datasetId"];

  // Required. Project ID of the dataset to be undeleted
  string project_id = 2
      [(google.api.field_behavior) = REQUIRED, json_name = "projectId"];

  // The UndeleteDatasetRequest for this request.
  optional google.cloud.cpp.bigquery.v2.UndeleteDatasetRequest
      undelete_dataset_request_resource = 3 [json_name = "__json_request_body"];
}

// Request message for UpdateDataset.
message UpdateDatasetRequest {
  // Required. Dataset ID of the dataset being updated
  string dataset_id = 1
      [(google.api.field_behavior) = REQUIRED, json_name = "datasetId"];

  // The Dataset for this request.
  optional google.cloud.cpp.bigquery.v2.Dataset dataset_resource = 2
      [json_name = "__json_request_body"];

  // Required. Project ID of the dataset being updated
  string project_id = 3
      [(google.api.field_behavior) = REQUIRED, json_name = "projectId"];
}
