// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the C++ microgenerator.
// If you make any local changes, they will be lost.
// file:///workspace/generator/discovery/bigquery_public_google_rest_v2.json
// revision: 20240124

syntax = "proto3";

package google.cloud.cpp.bigquery.tables.v2;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/cloud/bigquery/v2/internal/common_001.proto";
import "google/cloud/bigquery/v2/internal/common_003.proto";
import "google/protobuf/empty.proto";

// Service for the tables resource.
// https://cloud.google.com/bigquery/docs/reference/rest/v2/tables
service Tables {
  option (google.api.default_host) = "bigquery.googleapis.com";
  option (google.api.oauth_scopes) =
      "https://www.googleapis.com/auth/bigquery,"
      "https://www.googleapis.com/auth/cloud-platform,"
      "https://www.googleapis.com/auth/cloud-platform.read-only";

  // Deletes the table specified by tableId from the dataset. If the table
  // contains data, all the data will be deleted.
  // https://cloud.google.com/bigquery/docs/reference/rest/v2/tables/delete
  rpc DeleteTable(DeleteTableRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/bigquery/v2/projects/{project_id}/datasets/{dataset_id}/tables/{table_id}"
    };
    option (google.api.method_signature) = "project_id,dataset_id,table_id";
  }

  // Gets the specified table resource by table ID. This method does not return
  // the data in the table, it only returns the table resource, which describes
  // the structure of this table.
  // https://cloud.google.com/bigquery/docs/reference/rest/v2/tables/get
  rpc GetTable(GetTableRequest) returns (google.cloud.cpp.bigquery.v2.Table) {
    option (google.api.http) = {
      get: "/bigquery/v2/projects/{project_id}/datasets/{dataset_id}/tables/{table_id}"
    };
    option (google.api.method_signature) = "project_id,dataset_id,table_id";
  }

  // Gets the access control policy for a resource. Returns an empty policy if
  // the resource exists and does not have a policy set.
  // https://cloud.google.com/bigquery/docs/reference/rest/v2/tables/getIamPolicy
  rpc GetIamPolicy(GetIamPolicyRequest)
      returns (google.cloud.cpp.bigquery.v2.Policy) {
    option (google.api.http) = {
      post: "/bigquery/v2/{resource}:getIamPolicy"
      body: "get_iam_policy_request_resource"
    };
    option (google.api.method_signature) =
        "resource,get_iam_policy_request_resource";
  }

  // Creates a new, empty table in the dataset.
  // https://cloud.google.com/bigquery/docs/reference/rest/v2/tables/insert
  rpc InsertTable(InsertTableRequest)
      returns (google.cloud.cpp.bigquery.v2.Table) {
    option (google.api.http) = {
      post: "/bigquery/v2/projects/{project_id}/datasets/{dataset_id}/tables"
      body: "table_resource"
    };
    option (google.api.method_signature) =
        "project_id,dataset_id,table_resource";
  }

  // Lists all tables in the specified dataset. Requires the READER dataset
  // role.
  // https://cloud.google.com/bigquery/docs/reference/rest/v2/tables/list
  rpc ListTables(ListTablesRequest)
      returns (google.cloud.cpp.bigquery.v2.TableList) {
    option (google.api.http) = {
      get: "/bigquery/v2/projects/{project_id}/datasets/{dataset_id}/tables"
    };
    option (google.api.method_signature) = "project_id,dataset_id";
  }

  // Updates information in an existing table. The update method replaces the
  // entire table resource, whereas the patch method only replaces fields that
  // are provided in the submitted table resource. This method supports RFC5789
  // patch semantics.
  // https://cloud.google.com/bigquery/docs/reference/rest/v2/tables/patch
  rpc PatchTable(PatchTableRequest)
      returns (google.cloud.cpp.bigquery.v2.Table) {
    option (google.api.http) = {
      patch: "/bigquery/v2/projects/{project_id}/datasets/{dataset_id}/tables/{table_id}"
      body: "table_resource"
    };
    option (google.api.method_signature) =
        "project_id,dataset_id,table_id,table_resource";
  }

  // Sets the access control policy on the specified resource. Replaces any
  // existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
  // `PERMISSION_DENIED` errors.
  // https://cloud.google.com/bigquery/docs/reference/rest/v2/tables/setIamPolicy
  rpc SetIamPolicy(SetIamPolicyRequest)
      returns (google.cloud.cpp.bigquery.v2.Policy) {
    option (google.api.http) = {
      post: "/bigquery/v2/{resource}:setIamPolicy"
      body: "set_iam_policy_request_resource"
    };
    option (google.api.method_signature) =
        "resource,set_iam_policy_request_resource";
  }

  // Returns permissions that a caller has on the specified resource. If the
  // resource does not exist, this will return an empty set of permissions, not
  // a `NOT_FOUND` error. Note: This operation is designed to be used for
  // building permission-aware UIs and command-line tools, not for authorization
  // checking. This operation may "fail open" without warning.
  // https://cloud.google.com/bigquery/docs/reference/rest/v2/tables/testIamPermissions
  rpc TestIamPermissions(TestIamPermissionsRequest)
      returns (google.cloud.cpp.bigquery.v2.TestIamPermissionsResponse) {
    option (google.api.http) = {
      post: "/bigquery/v2/{resource}:testIamPermissions"
      body: "test_iam_permissions_request_resource"
    };
    option (google.api.method_signature) =
        "resource,test_iam_permissions_request_resource";
  }

  // Updates information in an existing table. The update method replaces the
  // entire Table resource, whereas the patch method only replaces fields that
  // are provided in the submitted Table resource.
  // https://cloud.google.com/bigquery/docs/reference/rest/v2/tables/update
  rpc UpdateTable(UpdateTableRequest)
      returns (google.cloud.cpp.bigquery.v2.Table) {
    option (google.api.http) = {
      put: "/bigquery/v2/projects/{project_id}/datasets/{dataset_id}/tables/{table_id}"
      body: "table_resource"
    };
    option (google.api.method_signature) =
        "project_id,dataset_id,table_id,table_resource";
  }
}

// Request message for DeleteTable.
message DeleteTableRequest {
  // Required. Dataset ID of the table to delete
  string dataset_id = 1
      [(google.api.field_behavior) = REQUIRED, json_name = "datasetId"];

  // Required. Project ID of the table to delete
  string project_id = 2
      [(google.api.field_behavior) = REQUIRED, json_name = "projectId"];

  // Required. Table ID of the table to delete
  string table_id = 3
      [(google.api.field_behavior) = REQUIRED, json_name = "tableId"];
}

// Request message for GetIamPolicy.
message GetIamPolicyRequest {
  // The GetIamPolicyRequest for this request.
  optional google.cloud.cpp.bigquery.v2.GetIamPolicyRequest
      get_iam_policy_request_resource = 1 [json_name = "__json_request_body"];

  // REQUIRED: The resource for which the policy is being requested. See
  // [Resource names](https://cloud.google.com/apis/design/resource_names) for
  // the appropriate value for this field.
  string resource = 2
      [(google.api.field_behavior) = REQUIRED, json_name = "resource"];
}

// Request message for GetTable.
message GetTableRequest {
  // Required. Dataset ID of the requested table
  string dataset_id = 1
      [(google.api.field_behavior) = REQUIRED, json_name = "datasetId"];

  // Required. Project ID of the requested table
  string project_id = 2
      [(google.api.field_behavior) = REQUIRED, json_name = "projectId"];

  // List of table schema fields to return (comma-separated). If unspecified,
  // all fields are returned. A fieldMask cannot be used here because the fields
  // will automatically be converted from camelCase to snake_case and the
  // conversion will fail if there are underscores. Since these are fields in
  // BigQuery table schemas, underscores are allowed.
  optional string selected_fields = 3 [json_name = "selectedFields"];

  // Required. Table ID of the requested table
  string table_id = 4
      [(google.api.field_behavior) = REQUIRED, json_name = "tableId"];

  // Optional. Specifies the view that determines which table information is
  // returned. By default, basic table information and storage statistics
  // (STORAGE_STATS) are returned.
  // TABLE_METADATA_VIEW_UNSPECIFIED: The default value. Default to the
  // STORAGE_STATS view.
  // BASIC: Includes basic table information including schema and partitioning
  // specification. This view does not include storage statistics such as
  // numRows or numBytes. This view is significantly more efficient and should
  // be used to support high query rates.
  // STORAGE_STATS: Includes all information in the BASIC view as well as
  // storage statistics (numBytes, numLongTermBytes, numRows and
  // lastModifiedTime).
  // FULL: Includes all table information, including storage statistics. It
  // returns same information as STORAGE_STATS view, but may contain additional
  // information in the future.
  optional string view = 5 [json_name = "view"];
}

// Request message for InsertTable.
message InsertTableRequest {
  // Required. Dataset ID of the new table
  string dataset_id = 1
      [(google.api.field_behavior) = REQUIRED, json_name = "datasetId"];

  // Required. Project ID of the new table
  string project_id = 2
      [(google.api.field_behavior) = REQUIRED, json_name = "projectId"];

  // The Table for this request.
  optional google.cloud.cpp.bigquery.v2.Table table_resource = 3
      [json_name = "__json_request_body"];
}

// Request message for ListTables.
message ListTablesRequest {
  // Required. Dataset ID of the tables to list
  string dataset_id = 1
      [(google.api.field_behavior) = REQUIRED, json_name = "datasetId"];

  // The maximum number of results to return in a single response page. Leverage
  // the page tokens to iterate through the entire collection.
  optional uint32 max_results = 2 [json_name = "maxResults"];

  // Page token, returned by a previous call, to request the next page of
  // results
  optional string page_token = 3 [json_name = "pageToken"];

  // Required. Project ID of the tables to list
  string project_id = 4
      [(google.api.field_behavior) = REQUIRED, json_name = "projectId"];
}

// Request message for PatchTable.
message PatchTableRequest {
  // Optional.  When true will autodetect schema, else will keep original schema
  optional bool autodetect_schema = 1 [json_name = "autodetect_schema"];

  // Required. Dataset ID of the table to update
  string dataset_id = 2
      [(google.api.field_behavior) = REQUIRED, json_name = "datasetId"];

  // Required. Project ID of the table to update
  string project_id = 3
      [(google.api.field_behavior) = REQUIRED, json_name = "projectId"];

  // Required. Table ID of the table to update
  string table_id = 4
      [(google.api.field_behavior) = REQUIRED, json_name = "tableId"];

  // The Table for this request.
  optional google.cloud.cpp.bigquery.v2.Table table_resource = 5
      [json_name = "__json_request_body"];
}

// Request message for SetIamPolicy.
message SetIamPolicyRequest {
  // REQUIRED: The resource for which the policy is being specified. See
  // [Resource names](https://cloud.google.com/apis/design/resource_names) for
  // the appropriate value for this field.
  string resource = 1
      [(google.api.field_behavior) = REQUIRED, json_name = "resource"];

  // The SetIamPolicyRequest for this request.
  optional google.cloud.cpp.bigquery.v2.SetIamPolicyRequest
      set_iam_policy_request_resource = 2 [json_name = "__json_request_body"];
}

// Request message for TestIamPermissions.
message TestIamPermissionsRequest {
  // REQUIRED: The resource for which the policy detail is being requested. See
  // [Resource names](https://cloud.google.com/apis/design/resource_names) for
  // the appropriate value for this field.
  string resource = 1
      [(google.api.field_behavior) = REQUIRED, json_name = "resource"];

  // The TestIamPermissionsRequest for this request.
  optional google.cloud.cpp.bigquery.v2.TestIamPermissionsRequest
      test_iam_permissions_request_resource = 2
      [json_name = "__json_request_body"];
}

// Request message for UpdateTable.
message UpdateTableRequest {
  // Optional.  When true will autodetect schema, else will keep original schema
  optional bool autodetect_schema = 1 [json_name = "autodetect_schema"];

  // Required. Dataset ID of the table to update
  string dataset_id = 2
      [(google.api.field_behavior) = REQUIRED, json_name = "datasetId"];

  // Required. Project ID of the table to update
  string project_id = 3
      [(google.api.field_behavior) = REQUIRED, json_name = "projectId"];

  // Required. Table ID of the table to update
  string table_id = 4
      [(google.api.field_behavior) = REQUIRED, json_name = "tableId"];

  // The Table for this request.
  optional google.cloud.cpp.bigquery.v2.Table table_resource = 5
      [json_name = "__json_request_body"];
}
