// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by the C++ microgenerator.
// If you make any local changes, they will be lost.
// file:///workspace/generator/discovery/bigquery_public_google_rest_v2.json
// revision: 20240124

syntax = "proto3";

package google.cloud.cpp.bigquery.tabledata.v2;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/cloud/bigquery/v2/internal/common_012.proto";

// Service for the tabledata resource.
// https://cloud.google.com/bigquery/docs/reference/rest/v2/tabledata
service Tabledata {
  option (google.api.default_host) = "bigquery.googleapis.com";
  option (google.api.oauth_scopes) =
      "https://www.googleapis.com/auth/bigquery,"
      "https://www.googleapis.com/auth/bigquery.insertdata,"
      "https://www.googleapis.com/auth/cloud-platform,"
      "https://www.googleapis.com/auth/cloud-platform.read-only";

  // Streams data into BigQuery one record at a time without needing to run a
  // load job.
  // https://cloud.google.com/bigquery/docs/reference/rest/v2/tabledata/insertAll
  rpc InsertAll(InsertAllRequest)
      returns (google.cloud.cpp.bigquery.v2.TableDataInsertAllResponse) {
    option (google.api.http) = {
      post: "/bigquery/v2/projects/{project_id}/datasets/{dataset_id}/tables/{table_id}/insertAll"
      body: "table_data_insert_all_request_resource"
    };
    option (google.api.method_signature) =
        "project_id,dataset_id,table_id,table_data_insert_all_request_resource";
  }

  // List the content of a table in rows.
  // https://cloud.google.com/bigquery/docs/reference/rest/v2/tabledata/list
  rpc ListTabledata(ListTabledataRequest)
      returns (google.cloud.cpp.bigquery.v2.TableDataList) {
    option (google.api.http) = {
      get: "/bigquery/v2/projects/{project_id}/datasets/{dataset_id}/tables/{table_id}/data"
    };
    option (google.api.method_signature) = "project_id,dataset_id,table_id";
  }
}

// Request message for InsertAll.
message InsertAllRequest {
  // Required. Dataset ID of the destination.
  string dataset_id = 1
      [(google.api.field_behavior) = REQUIRED, json_name = "datasetId"];

  // Required. Project ID of the destination.
  string project_id = 2
      [(google.api.field_behavior) = REQUIRED, json_name = "projectId"];

  // Required. Table ID of the destination.
  string table_id = 3
      [(google.api.field_behavior) = REQUIRED, json_name = "tableId"];

  // The TableDataInsertAllRequest for this request.
  optional google.cloud.cpp.bigquery.v2.TableDataInsertAllRequest
      table_data_insert_all_request_resource = 4
      [json_name = "__json_request_body"];
}

// Request message for ListTabledata.
message ListTabledataRequest {
  // Required. Dataset id of the table to list.
  string dataset_id = 1
      [(google.api.field_behavior) = REQUIRED, json_name = "datasetId"];

  // Optional. Output timestamp as usec int64. Default is false.
  optional bool format_options_use_int64_timestamp = 2
      [json_name = "formatOptions.useInt64Timestamp"];

  // Row limit of the table.
  optional uint32 max_results = 3 [json_name = "maxResults"];

  // To retrieve the next page of table data, set this field to the string
  // provided in the pageToken field of the response body from your previous
  // call to tabledata.list.
  optional string page_token = 4 [json_name = "pageToken"];

  // Required. Project id of the table to list.
  string project_id = 5
      [(google.api.field_behavior) = REQUIRED, json_name = "projectId"];

  // Subset of fields to return, supports select into sub fields. Example:
  // selected_fields = "a,e.d.f";
  optional string selected_fields = 6 [json_name = "selectedFields"];

  // Start row index of the table.
  optional string start_index = 7 [json_name = "startIndex"];

  // Required. Table id of the table to list.
  string table_id = 8
      [(google.api.field_behavior) = REQUIRED, json_name = "tableId"];
}
